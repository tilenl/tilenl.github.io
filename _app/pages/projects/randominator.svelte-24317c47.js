import{S as e,i as a,s as t,j as o,m as r,o as n,v as h,r as s,w as i,e as d,t as m,k as l,c,a as g,g as f,d as w,n as p,b as u,f as b,G as v}from"../../chunks/vendor-c14e11e8.js";import{T as I}from"../../chunks/Text-3219dccd.js";function y(e){let a,t,o,r,n,h,s,i,I,y,E,$,k,B,R,T,H,j,A,P,_,x,z,D,F,q,O,V,W,Y,G,K,L,M,N,Q,S,C,J,U,X,Z,ee,ae,te,oe,re,ne,he,se,ie,de,me,le,ce,ge,fe;return{c(){a=d("h1"),t=m("ðŸ’¡ Randominator"),o=l(),r=d("br"),n=l(),h=d("p"),s=m("You can download the code from "),i=d("a"),I=m("github"),y=m("."),E=l(),$=d("br"),k=l(),B=d("h2"),R=m("Why the name?"),T=l(),H=d("p"),j=m("I watched a lot of "),A=d("a"),P=m("Phineas and Ferb"),_=m(" when I was in primary school, and I still remember "),x=d("a"),z=m("Doofenshmirtz's inventions"),D=m('. Anything he created, he somehow managed to name "insert anything"-inator. Because of the stylish names he gave his inventions, I didn not want to stride far away with my project name, so I called it the '),F=d("b"),q=m("Randominator"),O=m("!"),V=l(),W=d("br"),Y=l(),G=d("h2"),K=m("How..."),L=l(),M=d("p"),N=m("It started as an idea to generate random game ideas, but I wanted it to be more generic. The major pain point originated from my game development path, where I wanted to practise making games, but I didn't have any ideas for short and quirky games."),Q=l(),S=d("br"),C=l(),J=d("h2"),U=m("Before V2"),X=l(),Z=d("p"),ee=m("The first version of the randominator was nothing more than a copy of "),ae=d("a"),te=m("Orteil's website generator"),oe=m(". It generated some good ideas, but the data was hardcoded into the program itself, which was a problem if I wanted to add new entries. Besides the data problem I also wanted to be able to give the program a template, how the generated sentences should look."),re=l(),ne=d("br"),he=l(),se=d("h2"),ie=m("Into the future->"),de=l(),me=d("p"),le=m("There is still "),ce=d("b"),ge=m("a lot"),fe=m(" I can improve. I am going to rewrite the whole program in Rust language, as I do think it will help with the general bug catching, but until then, I hope that some will find the program useful (also much easier to download the code through the use of cargo)."),this.h()},l(e){a=c(e,"H1",{});var d=g(a);t=f(d,"ðŸ’¡ Randominator"),d.forEach(w),o=p(e),r=c(e,"BR",{}),n=p(e),h=c(e,"P",{});var m=g(h);s=f(m,"You can download the code from "),i=c(m,"A",{href:!0});var l=g(i);I=f(l,"github"),l.forEach(w),y=f(m,"."),m.forEach(w),E=p(e),$=c(e,"BR",{}),k=p(e),B=c(e,"H2",{});var u=g(B);R=f(u,"Why the name?"),u.forEach(w),T=p(e),H=c(e,"P",{});var b=g(H);j=f(b,"I watched a lot of "),A=c(b,"A",{href:!0});var v=g(A);P=f(v,"Phineas and Ferb"),v.forEach(w),_=f(b," when I was in primary school, and I still remember "),x=c(b,"A",{href:!0});var we=g(x);z=f(we,"Doofenshmirtz's inventions"),we.forEach(w),D=f(b,'. Anything he created, he somehow managed to name "insert anything"-inator. Because of the stylish names he gave his inventions, I didn not want to stride far away with my project name, so I called it the '),F=c(b,"B",{});var pe=g(F);q=f(pe,"Randominator"),pe.forEach(w),O=f(b,"!"),b.forEach(w),V=p(e),W=c(e,"BR",{}),Y=p(e),G=c(e,"H2",{});var ue=g(G);K=f(ue,"How..."),ue.forEach(w),L=p(e),M=c(e,"P",{});var be=g(M);N=f(be,"It started as an idea to generate random game ideas, but I wanted it to be more generic. The major pain point originated from my game development path, where I wanted to practise making games, but I didn't have any ideas for short and quirky games."),be.forEach(w),Q=p(e),S=c(e,"BR",{}),C=p(e),J=c(e,"H2",{});var ve=g(J);U=f(ve,"Before V2"),ve.forEach(w),X=p(e),Z=c(e,"P",{});var Ie=g(Z);ee=f(Ie,"The first version of the randominator was nothing more than a copy of "),ae=c(Ie,"A",{href:!0});var ye=g(ae);te=f(ye,"Orteil's website generator"),ye.forEach(w),oe=f(Ie,". It generated some good ideas, but the data was hardcoded into the program itself, which was a problem if I wanted to add new entries. Besides the data problem I also wanted to be able to give the program a template, how the generated sentences should look."),Ie.forEach(w),re=p(e),ne=c(e,"BR",{}),he=p(e),se=c(e,"H2",{});var Ee=g(se);ie=f(Ee,"Into the future->"),Ee.forEach(w),de=p(e),me=c(e,"P",{});var $e=g(me);le=f($e,"There is still "),ce=c($e,"B",{});var ke=g(ce);ge=f(ke,"a lot"),ke.forEach(w),fe=f($e," I can improve. I am going to rewrite the whole program in Rust language, as I do think it will help with the general bug catching, but until then, I hope that some will find the program useful (also much easier to download the code through the use of cargo)."),$e.forEach(w),this.h()},h(){u(i,"href","https://github.com/tilenl/Randominator"),u(A,"href","https://www.youtube.com/watch?v=NkQrKxTFARM"),u(x,"href","https://milomurphyslaw.fandom.com/wiki/List_of_Inators_and_inventions_by_Heinz_Doofenshmirtz"),u(ae,"href","https://orteil.dashnet.org/gamegen")},m(e,d){b(e,a,d),v(a,t),b(e,o,d),b(e,r,d),b(e,n,d),b(e,h,d),v(h,s),v(h,i),v(i,I),v(h,y),b(e,E,d),b(e,$,d),b(e,k,d),b(e,B,d),v(B,R),b(e,T,d),b(e,H,d),v(H,j),v(H,A),v(A,P),v(H,_),v(H,x),v(x,z),v(H,D),v(H,F),v(F,q),v(H,O),b(e,V,d),b(e,W,d),b(e,Y,d),b(e,G,d),v(G,K),b(e,L,d),b(e,M,d),v(M,N),b(e,Q,d),b(e,S,d),b(e,C,d),b(e,J,d),v(J,U),b(e,X,d),b(e,Z,d),v(Z,ee),v(Z,ae),v(ae,te),v(Z,oe),b(e,re,d),b(e,ne,d),b(e,he,d),b(e,se,d),v(se,ie),b(e,de,d),b(e,me,d),v(me,le),v(me,ce),v(ce,ge),v(me,fe)},d(e){e&&w(a),e&&w(o),e&&w(r),e&&w(n),e&&w(h),e&&w(E),e&&w($),e&&w(k),e&&w(B),e&&w(T),e&&w(H),e&&w(V),e&&w(W),e&&w(Y),e&&w(G),e&&w(L),e&&w(M),e&&w(Q),e&&w(S),e&&w(C),e&&w(J),e&&w(X),e&&w(Z),e&&w(re),e&&w(ne),e&&w(he),e&&w(se),e&&w(de),e&&w(me)}}}function E(e){let a,t;return a=new I({props:{$$slots:{default:[y]},$$scope:{ctx:e}}}),{c(){o(a.$$.fragment)},l(e){r(a.$$.fragment,e)},m(e,o){n(a,e,o),t=!0},p(e,[t]){const o={};1&t&&(o.$$scope={dirty:t,ctx:e}),a.$set(o)},i(e){t||(h(a.$$.fragment,e),t=!0)},o(e){s(a.$$.fragment,e),t=!1},d(e){i(a,e)}}}export default class extends e{constructor(e){super(),a(this,e,null,E,t,{})}}
